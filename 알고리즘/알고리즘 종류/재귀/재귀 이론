반복문으로 풀 수 있는 문제는 재귀함수로도 풀 수 있다.
반복문이 더 깔끔하고 효율적일 수 있고,
재귀함수가 더 깔끔하거나 효율적일 수 있다.

def say_hello(name):
  print("hello"+name)
my_name="doyeon"
say_hello(my_name)

재귀함수의 단점:
프로그램은 함수의 위치를 기억해뒀다가
함수가 호출하면 함수의 위치로 가서 실행한다.
그리고 함수가 끝나면 함수를 호출한 부분으로 다시 돌아간다.

함수를 호출한 위치를 기억해두는데 이걸 콜스택이라 한다.
호출하고 돌아가면 콜스택이 지워지지만 
재귀함수를 통해 함수를 계속 호출하게 되면
더 이상 기록할 공간이 없어지게 된다.
이를 스택오버플로우(stackOverFlow)라 한다.

파이썬은 재귀를 1000번만 실행되게 제한을 두었다.
그 이상을 실행하게 되면 RecursionError가 뜨고 프로그램이 중단된다.

Recursive case: 
현 문제가 너무 커서, 
같은 형태의 더 작은 부분 문제를 재귀적으로 푸는 경우
Base case: 
이미 문제가 충분히 작아서, 
더 작은 부분 문제로 나누지 않고도 바로 답을 알 수 있는 경우