#
1. 최적 부분 구조가 있다.
2. 기존 문제를 부분 문제로 나눠서 풀 수 있다.
3. 중복되는 부분 문제들이 있을 수 있다.
그럴 경우 똑같은 문제를 여러 번 풀어야 하는 비효율이 발생한다.
이를 해결하는 알고리즘 패러다임이 동적프로그래밍(Dynamic Programming)이다
한 번 계산한 결과를 재활용하는 방식이다.
#
동적 프로그래밍의 조건
1. 최적 부분 구조 (Optimal Substructure):
부분 문제들의 최적의 답을 이용해서 기존 문제의 최적의 답을 구할 수 있다는 것.
fib(5) -> fib(4) + fib(3)

2. 중복되는 부분 문제 (Overlappling Subprobelm)
재귀함수 -> 부분문제
피보나치수의 재귀로 보면 같은 부분문제가 중복된다.

#
Memoization:
중복되는 계산을 한 번만 한 후 메모.
한 번 계산한 값은 따로 저장해 두는데 
보통 이렇게 다시 쓸 값들을 저장해놓는 공간을 캐시(cache)라 부른다.
재귀를 이용한다.
하향식 접근(Top-down Approach).
#
Tabulation
중복되는 것부터 푸는 방법.
표(Table)을 채워나가는 식으로 푸는 법.
반복문을 이용한다.
상향식 접근(Bottom-up Approach)

#
Memoization과 Tabulation의 공통점은 둘 다 중복되는 부분 문제의 비효율을 해결한다.
가장 큰 차이는 Memoization은 재귀 Tabulation은 반복문을 사용한다.
Tabulation은 상향식 접근이기 때문에 필요없는 부분도 계산하게 될 수도 있다.
Memoization은 하향식 접근으로 위에서 값을 요구하기 때문에 필요한 계산만 한다.

#
Dynamic Programming을 할 떄, 모든 계산값을 저장할 필요가 없다면...
필요한 값만 저장해서 사용한다.
ex)
피보나치의 수
current=1
previous=0
current, previous=current+previous, current