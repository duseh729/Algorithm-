#지뢰 인덱스 저장 함수
def save_index(n):
    k=[[i,j] for i in range(len(n)) for j in range(len(n)) if n[i][j]==1]
    print(k)
    return k

#배열의 인덱스가 범위 밖으로 가는 것을 막기 위해 만든 함수
def negative_num(n):
    return 0 if n<0 else n
def over_index(n, m):
    return n-1 if m==n else n

#지뢰주변을 1로 바꾸는 함수
def mine_area(n, board):
    for j in n:
        board[j[0]][over_index(j[1]+1, len(board))]=1
        board[j[0]][negative_num(j[1]-1)]=1
        board[negative_num(j[0]-1)][over_index(j[1]+1, len(board))]=1
        board[negative_num(j[0]-1)][j[1]]=1
        board[negative_num(j[0]-1)][negative_num(j[1]-1)]=1
        board[over_index(j[0]+1, len(board))][over_index(j[1]+1, len(board))]=1
        board[over_index(j[0]+1, len(board))][j[1]]=1
        board[over_index(j[0]+1, len(board))][negative_num(j[1]-1)]=1
    return board

def solution(board):
    s_index = save_index(board)
    m_area=mine_area(s_index, board)
    answer = 0
    for i in m_area:
        answer+=i.count(1)
    return len(board)*len(board)-answer