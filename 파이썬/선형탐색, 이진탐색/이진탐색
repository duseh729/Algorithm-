def binary_search(element, some_list):
    # 여기에 코드를 작성하세요
    start_index = 0
    end_index = len(some_list) - 1
    
    while start_index <= end_index:
        midpoint = (start_index + end_index) // 2
        if some_list[midpoint] == element:
            return midpoint
        elif some_list[midpoint] > element:
            end_index = midpoint - 1
        else:
            start_index = midpoint + 1
    return None

print(binary_search(2, [2, 3, 5, 7, 11]))
print(binary_search(0, [2, 3, 5, 7, 11]))
print(binary_search(5, [2, 3, 5, 7, 11]))
print(binary_search(3, [2, 3, 5, 7, 11]))
print(binary_search(11, [2, 3, 5, 7, 11]))

# 힌트 1
# 이진 탐색은 탐색 범위를 반씩 줄여 나가는 알고리즘입니다. 
# 탐색 범위의 시작관 끝을 나타내는 변수를 각각 보관하면 좋을 텐데요.

# 시작할 때의 탐색 범위는 some_list의 처음부터 끝까지죠?
# 그러니까 인덱스 0부터 인덱스 len(some_list) - 1까지 입니다.

# def binary_search(element, some_list):
#     start_index = 0
#     end_index = len(some_list) - 1
# 힌트 2
# 이제 반복문을 돌면서 탐색을 해야 하는데요. 반복문을 어떻게 설계해야 할까요?

# 우리가 반복적으로 하려는 일이 무엇인가요?

# def binary_search(element, some_list):
#     start_index = 0
#     end_index = len(some_list) - 1
        
#     # 반복문
    
#     return None

# 힌트 3
# 우리가 반복적으로 해야 하는 일은 이겁니다.

# 현재 탐색 범위에서의 중간값이 element면, 중간 인덱스를 리턴한다.
# 그렇지 않으면, 탐색 범위를 줄인다.
# 힌트 4
# 위 두 개 중 1번은 어렵지 않습니다.

# 1번을 코드로 어떻게 작성할 수 있을까요?

# 힌트 5
# midpoint = (start_index + end_index) // 2
# if some_list[midpoint] == element:
#     return midpoint
# 힌트 6
# 2번은 조금 헷갈릴 수 있는데요. 경우를 나눠서 생각해 보면 그리 어렵지 않습니다.

# element가 중간값보다 작으면, 오른쪽 반은 더 이상 볼 필요가 없다.
# element가 중간값보다 크면, 왼쪽 반은 더 이상 볼 필요가 없다.
# 위 경우를 코드로 어떻게 표현할 수 있을까요?

# 힌트 7
# 1번의 경우 end_index를 조정하면 되고, 2번의 경우 start_index를 조정하면 됩니다!

# 힌트 8
# while 조건 부분:
#     midpoint = (start_index + end_index) // 2
#     if some_list[midpoint] == element:
#         return midpoint
#     elif element < some_list[midpoint]:
#         end_index = midpoint - 1
#     else:
#         start_index = midpoint + 1
# 반복문의 조건 부분은 어떻게 해야 할까요?

# 힌트 9
# 범위를 줄이다 보면 start_index와 end_index가 엇갈리는 순간이 올 겁니다. 
# 그 때가 되면 더 이상 탐색할 범위가 없는 거죠.